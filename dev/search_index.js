var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = CCNs","category":"page"},{"location":"#CCNs","page":"Home","title":"CCNs","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for CCNs.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [CCNs]","category":"page"},{"location":"#CCNs.INVALID_FACILITY_TYPE","page":"Home","title":"CCNs.INVALID_FACILITY_TYPE","text":"INVALID_FACILITY_TYPE\n\nA String representing an invalid facility type code for a given CCN type.\n\n\n\n\n\n","category":"constant"},{"location":"#CCNs.INVALID_STATE","page":"Home","title":"CCNs.INVALID_STATE","text":"INVALID_STATE\n\nA String that represents an invalid state code.\n\n\n\n\n\n","category":"constant"},{"location":"#CCNs.CCN","page":"Home","title":"CCNs.CCN","text":"CCN\n\nA representation of a CMS Certification Number.\n\nCCNs are a uniform way of identifying providers or suppliers who currently or who ever have participated in the Medicare or Medicaid programs. A CCN is a 6- or 10-character alphanumeric string that encodes the provider or supplier's (respectively) State and facility type.\n\nCCNs can be constructed from AbstractString or Integer objects, but Integers can only represent a subset of all possible CCNs.\n\nCCNs inherit from AbstractString, so methods like length, get, etc. are all defined and work as if the CCN were a string identifier.\n\nCCNs are defined by CMS Manual System publication number 100-07 \"State Operations Provider Certification\".\n\n\n\n\n\n","category":"type"},{"location":"#CCNs.ccn-Tuple{Type{SupplierCCN}, AbstractString}","page":"Home","title":"CCNs.ccn","text":"ccn([T::Type], s)\n\nConstruct a CCN from input s.\n\nArguments\n\n- `T::Type` (optional) - The type of the CCN. If no type is given, the best guess of the type will be made based on the format of the input `s`.\n- `s::Union{AbstractString,Integer}` - The input to parse to create the CCN.\n\nReturn value\n\nReturns a CCN of concrete type T if given, else the type will be inferred from format of s.\n\n\n\n\n\n","category":"method"},{"location":"#CCNs.decode","page":"Home","title":"CCNs.decode","text":"decode([io::IO], ccn)\n\nDecode ccn and either return the information as a String or write to IO.\n\n\n\n\n\n","category":"function"},{"location":"#CCNs.facility_type","page":"Home","title":"CCNs.facility_type","text":"facility_type(ccn) -> String\n\nReturn a description of the facility type of ccn as a String.\n\nReturns CCNs.INVALID_FACILITY_TYPE if the facility type code is invalid for the CCN type.\n\n\n\n\n\n","category":"function"},{"location":"#CCNs.facility_type_code","page":"Home","title":"CCNs.facility_type_code","text":"facility_type_code(ccn) -> String\n\nReturn the facility type code of ccn as a String.\n\nThe facility type is dependent on the type of CCN, but usually involves the 3rd character of the code.\n\n\n\n\n\n","category":"function"},{"location":"#CCNs.infer_ccn_type-Tuple{AbstractString}","page":"Home","title":"CCNs.infer_ccn_type","text":"infer_ccn_type(s) -> `Type{T} where T <: CCN`\n\nInfer the type of the CCN from the input.\n\nArguments\n\n- `s::Union{AbstractString,Integer}` - The value to parse.\n\nReturn value\n\nThe inferred type. Throws if the type cannot be inferred from the input.\n\n\n\n\n\n","category":"method"},{"location":"#CCNs.sequence_number","page":"Home","title":"CCNs.sequence_number","text":"sequence_number(ccn) -> Int64\n\nDecode the sequence number from a given CCN.\n\nSequence numbers are sometimes indefinite. If this is the case, then only the decodable digits of the sequence number are returned (typically the last digits).\n\n\n\n\n\n","category":"function"},{"location":"#CCNs.state-Tuple{CCNs.CCN}","page":"Home","title":"CCNs.state","text":"state(ccn) -> String\n\nDecode the state code of ccn and return it as a String.\n\nThe first two characters of a CCN encode the \"state\" where the entity is located. \"State\" is interpreted loosely, as valid states include countries (like Canada) and territories (like (Guam).\n\nReturns CCNs.INVALID_STATE if the first two characters are not a valid state code.\n\n\n\n\n\n","category":"method"},{"location":"#CCNs.state_code-Tuple{CCNs.CCN}","page":"Home","title":"CCNs.state_code","text":"state_code(ccn) -> String\n\nReturn the state code of ccn (the first two characters) as a String.\n\n\n\n\n\n","category":"method"}]
}
